{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/Form.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { useForm } from \"react-hook-form\";\nimport \"./styles.css\"; // This form is made using react-hook-form package (https://react-hook-form.com/)\n\nexport default function App() {\n  const {\n    register,\n    errors,\n    handleSubmit,\n    reset\n  } = useForm({\n    criteriaMode: \"all\"\n  }); // What to do onSubmit. We send the data to the Backend to get it inside the DB.\n  // Request returns HTTP Response. Managed in BundleController @ Backend.\n\n  const onSubmit = data => {\n    fetch('http://localhost:8000/api/bundle/store', {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }); // Show a successfully sent message\n\n    document.getElementById(\"successfully\").style.display = \"block\"; // Reset the form inputs. This function comes from react-hook-form api https://react-hook-form.com/api#reset\n\n    reset(); // Hide the successful message for 5 seconds then hide it again.\n\n    setTimeout(function () {\n      document.getElementById(\"successfully\") ? document.getElementById(\"successfully\").style.display = \"none\" : console.log('ok');\n    }, 5000);\n  }; // Return the form. Form building.\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \" Name and Bundle Form \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"name\",\n    placeholder: \"Name\",\n    ref: register({\n      required: \"This input is required.\",\n      //error message for required\n      minLength: {\n        value: 4,\n        // Min Length of data\n        message: \"This input must exceed 4 characters\" // Error message\n\n      },\n      pattern: {\n        value: /^[a-zA-Z0-9 \\-_]*([a-zA-Z0-9]{2})[a-zA-Z0-9 \\-_]*$/,\n        // REGEX pattern used to validate data.\n        message: \"This is not a valid name.\" // Error message\n\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"name\",\n    render: ({\n      messages\n    }) => {\n      console.log(\"messages\", messages);\n      return messages ? Object.entries(messages).map(([type, message]) => /*#__PURE__*/React.createElement(\"p\", {\n        key: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, message)) : null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"bundle\",\n    placeholder: \"Bundle\",\n    ref: register({\n      required: \"This input is required.\",\n      //error message for required\n      pattern: {\n        value: /^(([a-z0-9_])*(\\.))+[a-z]+[a-z0-9]*$/,\n        // REGEX pattern used to validate data\n        message: \"This is not a valid bundle name.\" // Error message\n\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"bundle\",\n    render: ({\n      messages\n    }) => {\n      console.log(\"messages\", messages);\n      return messages ? Object.entries(messages).map(([type, message]) => /*#__PURE__*/React.createElement(\"p\", {\n        key: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, message)) : null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    id: \"successfully\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \" Form submitted successfully! \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit Bundle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }));\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/usr/src/app/src/Form.js"],"names":["React","ReactDOM","ErrorMessage","useForm","App","register","errors","handleSubmit","reset","criteriaMode","onSubmit","data","fetch","method","mode","headers","body","JSON","stringify","document","getElementById","style","display","setTimeout","console","log","required","minLength","value","message","pattern","messages","Object","entries","map","type","rootElement","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { useForm } from \"react-hook-form\";\n\nimport \"./styles.css\";\n\n// This form is made using react-hook-form package (https://react-hook-form.com/)\nexport default function App() {\n  const { register, errors, handleSubmit, reset } = useForm({\n    criteriaMode: \"all\"\n  });\n  // What to do onSubmit. We send the data to the Backend to get it inside the DB.\n  // Request returns HTTP Response. Managed in BundleController @ Backend.\n  const onSubmit = data => {\n        fetch('http://localhost:8000/api/bundle/store', {\n            method: 'POST',\n            mode: 'no-cors', \n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(data),\n        }); \n        // Show a successfully sent message\n        document.getElementById(\"successfully\").style.display = \"block\";\n        // Reset the form inputs. This function comes from react-hook-form api https://react-hook-form.com/api#reset\n        reset();\n        // Hide the successful message for 5 seconds then hide it again.\n        setTimeout(function(){\n            document.getElementById(\"successfully\") ? document.getElementById(\"successfully\").style.display = \"none\" : console.log('ok');\n        }, 5000);\n    }\n\n\n  // Return the form. Form building.\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Title */}\n      <h1 id=\"title\"> Name and Bundle Form </h1>\n\n      {/* First input, name. A valid name must be at least 4 chars, \n      ,only contain letters, numbers, spaces or - or _ and at least 2 numbers or letters. */}\n      <input\n        name=\"name\"\n        placeholder=\"Name\"\n        ref={register({\n          required: \"This input is required.\", //error message for required\n          minLength: {\n            value: 4, // Min Length of data\n            message: \"This input must exceed 4 characters\" // Error message\n          },pattern: {\n            value: /^[a-zA-Z0-9 \\-_]*([a-zA-Z0-9]{2})[a-zA-Z0-9 \\-_]*$/, // REGEX pattern used to validate data.\n            message: \"This is not a valid name.\" // Error message\n          }\n        })}\n      />\n      {/* ErrorMessage object, used to display the errors made in\n      the validation of the input. For each error, it prints it's error message. */}\n      <ErrorMessage\n        errors={errors}\n        name=\"name\"\n        render={({ messages }) => {\n          console.log(\"messages\", messages);\n          return messages\n            ? Object.entries(messages).map(([type, message]) => (\n                <p key={type}>{message}</p>\n              ))\n            : null;\n        }}\n      />\n        <br/>\n      {/* Bundle Input. It must have at least two segments, each segments\n      starts with a letter and all characters alphanumeric or underscore. */}\n      <input\n        name=\"bundle\"\n        placeholder=\"Bundle\"\n        ref={register({\n          required: \"This input is required.\", //error message for required\n          pattern: {\n            value: /^(([a-z0-9_])*(\\.))+[a-z]+[a-z0-9]*$/, // REGEX pattern used to validate data\n            message: \"This is not a valid bundle name.\" // Error message\n          }\n        })}\n      />\n      {/* ErrorMessage object, used to display the errors made in\n      the validation of the input */}\n      <ErrorMessage\n        errors={errors}\n        name=\"bundle\"\n        render={({ messages }) => {\n          console.log(\"messages\", messages);\n          return messages\n            ? Object.entries(messages).map(([type, message]) => (\n                <p key={type}>{message}</p>\n              ))\n            : null;\n        }}\n      />\n\n      {/* Submit button */}\n      <p id=\"successfully\"> Form submitted successfully! </p>\n      <input type=\"submit\" value=\"Submit Bundle\" /> \n    </form>\n  );\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}