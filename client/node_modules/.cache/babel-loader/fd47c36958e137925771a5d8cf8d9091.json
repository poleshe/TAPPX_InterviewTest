{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { useForm } from \"react-hook-form\";\nimport \"./styles.css\"; // This form is made using react-hook-form package (https://react-hook-form.com/)\n\nexport default function App() {\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm({\n    criteriaMode: \"all\"\n  }); // What to do onSubmit. We send the data to the Backend to get it inside the DB.\n\n  const onSubmit = data => console.log(data); // Return the form. Form building.\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \" Name and Bundle Form \"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"name\",\n    ref: register({\n      required: \"This input is required.\",\n      //error message for required\n      pattern: {\n        value: /([a-zA-Z])*\\.+([a-zA-Z])+\\.+/,\n        // REGEX pattern used to validate data\n        message: \"This input is number only.\" // Error message\n\n      },\n      minLength: {\n        value: 4,\n        // Min Length of data\n        message: \"This input must exceed 4 characters\" // Error message\n\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"name\",\n    render: ({\n      messages\n    }) => {\n      console.log(\"messages\", messages);\n      return messages ? Object.entries(messages).map(([type, message]) => /*#__PURE__*/React.createElement(\"p\", {\n        key: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, message)) : null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"bundle\",\n    ref: register({\n      required: \"This input is required.\",\n      //error message for required\n      pattern: {\n        value: /([a-zA-Z])*\\.+([a-zA-Z])+\\.+/,\n        // REGEX pattern used to validate data\n        message: \"This input is number only.\" // Error message\n\n      },\n      minLength: {\n        value: 11,\n        // Min Length of data\n        message: \"This input must exceed 10 characters\" // Error message\n\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    errors: errors,\n    name: \"bundle\",\n    render: ({\n      messages\n    }) => {\n      console.log(\"messages\", messages);\n      return messages ? Object.entries(messages).map(([type, message]) => /*#__PURE__*/React.createElement(\"p\", {\n        key: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, message)) : null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit Bundle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["/usr/src/app/src/index.js"],"names":["React","ReactDOM","ErrorMessage","useForm","App","register","errors","handleSubmit","criteriaMode","onSubmit","data","console","log","required","pattern","value","message","minLength","messages","Object","entries","map","type","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { useForm } from \"react-hook-form\";\n\nimport \"./styles.css\";\n\n// This form is made using react-hook-form package (https://react-hook-form.com/)\nexport default function App() {\n  const { register, errors, handleSubmit } = useForm({\n    criteriaMode: \"all\"\n  });\n  // What to do onSubmit. We send the data to the Backend to get it inside the DB.\n  const onSubmit = data => console.log(data);\n\n  // Return the form. Form building.\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {/* Title */}\n      <h1> Name and Bundle Form </h1>\n\n      {/* First input, name. A valid name must be at least 4 chars, \n      and only contain letters, numbers, spaces or - or _ */}\n      <input\n        name=\"name\"\n        ref={register({\n          required: \"This input is required.\", //error message for required\n          pattern: {\n            value: /([a-zA-Z])*\\.+([a-zA-Z])+\\.+/, // REGEX pattern used to validate data\n            message: \"This input is number only.\" // Error message\n          },\n          minLength: {\n            value: 4, // Min Length of data\n            message: \"This input must exceed 4 characters\" // Error message\n          }\n        })}\n      />\n      {/* ErrorMessage object, used to display the errors made in\n      the validation of the input. For each error, it prints it's error message. */}\n      <ErrorMessage\n        errors={errors}\n        name=\"name\"\n        render={({ messages }) => {\n          console.log(\"messages\", messages);\n          return messages\n            ? Object.entries(messages).map(([type, message]) => (\n                <p key={type}>{message}</p>\n              ))\n            : null;\n        }}\n      />\n        <br/>\n      {/* Bundle Input. It must have at least two segments, each segments\n      starts with a letter and all characters alphanumeric or underscore. */}\n      <input\n        name=\"bundle\"\n        ref={register({\n          required: \"This input is required.\", //error message for required\n          pattern: {\n            value: /([a-zA-Z])*\\.+([a-zA-Z])+\\.+/, // REGEX pattern used to validate data\n            message: \"This input is number only.\" // Error message\n          },\n          minLength: {\n            value: 11, // Min Length of data\n            message: \"This input must exceed 10 characters\" // Error message\n          }\n        })}\n      />\n      {/* ErrorMessage object, used to display the errors made in\n      the validation of the input */}\n      <ErrorMessage\n        errors={errors}\n        name=\"bundle\"\n        render={({ messages }) => {\n          console.log(\"messages\", messages);\n          return messages\n            ? Object.entries(messages).map(([type, message]) => (\n                <p key={type}>{message}</p>\n              ))\n            : null;\n        }}\n      />\n      {/* Submit button */}\n      <input type=\"submit\" value=\"Submit Bundle\" /> \n    </form>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}